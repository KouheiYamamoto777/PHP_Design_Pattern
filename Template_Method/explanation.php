<?php

/**
 * Template Methodパターン
 *  プログラムを作っていると、似たような処理がたくさん出てくることがある。
 *  完全に同じ処理内容であれば、親クラスにその処理をうつしたりクラスメソッドとして
 *  別クラスを作成するべき。しかし、処理フローは同じだがごく一部だけ処理内容が異なる場合
 *  安易にコピーペーストして新しいクラスを作ってしまうと、その処理にバグがあった場合
 *  コピーペーストして作ったクラス全てを修正しなければならない。
 *  その異なる処理の部分だけを分けておき、クラスごとにその処理を実装すればいいようになるのが理想的。
 *  これを実現するパターンが、Template Methodパターン
 *  
 *  Template Methodパターンは、クラスの振る舞いに注目したパターンで、
 *  子クラスで具体的な振る舞いを決定させることを目的とする。
 *  
 *  親クラスで処理の大きな枠組みを定義し、具体的な処理内容を子クラスで決定させる。
 *  GoFパターンでも最も基本的なパターン
 *  
 *  一見すると、普通の継承と変わらないが、
 *  処理の一部分を子クラスで実装する　というのがポイント
 * 
 * パターン構造について
 *  AbstractClassクラス
 *      処理の大きな枠組みを定義するクラス
 *      その枠組みを定義するメソッドと、枠組みから利用される抽象メソッドを含んでいる。
 *      抽象メソッドの具体的なん処理内容は、子クラスで実装する。
 *      なお、抽象メソッドのように子クラスで実装することが期待されるメソッドの名前を
 *      do~ とすることが多い
 *  ConcreteClassクラス
 *      AbstractClassクラスを継承した子クラス。
 *      親クラスで定義された抽象メソッドを実装し、具体的な処理内容を決定する。
 *      このメソッドは親クラスで枠組みを定義したメソッドから呼び出される。
 * 
 * メリット
 * 共通な処理をまとめることができる
 * 変更に強い
 * 子クラスにより具体的な処理内容を変えることができる
 */

/**
 * ここでは渡されたデータを成形して表示する簡単なアプリにTemplate Methodパターンを適用した例
 * コンストラクタの引数として表示するデータを受け取り、displayメソッドでそのデータを成形して
 * ヘッダ、ボディ、フッタの順で表示する
*/

